# Instructions

- Following Playwright test failed.
- Explain why, be concise, respect Playwright best practices.
- Provide a snippet of code with the fix, if possible.

# Test info

- Name: Page object model happy path for second test
- Location: /Users/aidan.quinn/Desktop/Graduate Academy/TestingWorkshop/testing-workshop-playwright-pom/tests/POM.spec.ts:5:5

# Error details

```
Error: Timed out 5000ms waiting for expect(locator).toHaveText(expected)

Locator: locator('h1')
- Expected string  - 1
+ Received string  + 7

- Information based on your answers
+
+         
+     Calculate holiday entitlement:
+   
+
+     Information based on your answers
+
Call log:
  - expect.toHaveText with timeout 5000ms
  - waiting for locator('h1')
    9 × locator resolved to <h1 class="gem-c-heading__text govuk-heading-xl">…</h1>
      - unexpected value "
        
    Calculate holiday entitlement:
  

    Information based on your answers
"

    at LandingPage.happyPath1 (/Users/aidan.quinn/Desktop/Graduate Academy/TestingWorkshop/testing-workshop-playwright-pom/tests/pages/landingPage.ts:96:42)
    at /Users/aidan.quinn/Desktop/Graduate Academy/TestingWorkshop/testing-workshop-playwright-pom/tests/POM.spec.ts:8:5
```

# Page snapshot

```yaml
- region "Cookies on GOV.UK":
  - heading "Cookies on GOV.UK" [level=2]
  - paragraph: We use some essential cookies to make this website work.
  - paragraph: We’d like to set additional cookies to understand how you use GOV.UK, remember your settings and improve government services.
  - paragraph: We also use cookies set by other sites to help us deliver content from their services.
  - button "Accept additional cookies"
  - button "Reject additional cookies"
  - link "View cookies"
- link "Skip to main content"
- banner:
  - link "Go to the GOV.UK homepage":
    - img "GOV.UK"
  - navigation "Navigation menu":
    - heading "Navigation menu" [level=2]
    - button "Show navigation menu": Menu
    - button "Show search menu": Search GOV.UK
- main:
  - 'heading "Calculate holiday entitlement: Information based on your answers" [level=1]'
  - paragraph: The statutory entitlement is 224 hours holiday.
  - paragraph: "The employer:"
  - list:
    - listitem: can include bank and public holidays as part of the statutory entitlement
    - listitem: can choose to round up the holiday entitlement, but cannot round it down
    - listitem:
      - text: must provide
      - link "holiday pay"
      - text: during the statutory leave
    - listitem: can provide more paid holiday - this will be in the employment contract and is called ‘contractual leave entitlement’
  - paragraph:
    - link "Read detailed guidance on how holiday entitlement is calculated"
    - text: .
  - heading "Your answers" [level=2]
  - paragraph:
    - link "Start again"
  - term: Does the employee work irregular hours or for part of the year?
  - definition: "No"
  - definition:
    - link "Change Does the employee work irregular hours or for part of the year?"
  - term: "Is the holiday entitlement based on:"
  - definition: hours worked per week
  - definition:
    - link "Change Is the holiday entitlement based on:"
  - term: "Do you want to work out holiday:"
  - definition: for a full leave year
  - definition:
    - link "Change Do you want to work out holiday:"
  - term: Number of hours worked per week?
  - definition: "40.0"
  - definition:
    - link "Change Number of hours worked per week?"
  - term: Number of days worked per week?
  - definition: "3.5"
  - definition:
    - link "Change Number of days worked per week?"
  - heading "Related content" [level=2]
  - navigation "Related content":
    - list:
      - listitem:
        - link "Calculate your agricultural worker holiday entitlement"
      - listitem:
        - link "Holiday entitlement"
      - listitem:
        - link "Night working hours"
      - listitem:
        - link "Sunday working"
- heading "Is this page useful?" [level=2]
- list:
  - listitem:
    - button "Yes this page is useful"
  - listitem:
    - button "No this page is not useful"
- button "Report a problem with this page"
- contentinfo:
  - heading "Services and information" [level=2]
  - list:
    - listitem:
      - link "Benefits"
    - listitem:
      - link "Births, death, marriages and care"
    - listitem:
      - link "Business and self-employed"
    - listitem:
      - link "Childcare and parenting"
    - listitem:
      - link "Citizenship and living in the UK"
    - listitem:
      - link "Crime, justice and the law"
    - listitem:
      - link "Disabled people"
    - listitem:
      - link "Driving and transport"
    - listitem:
      - link "Education and learning"
    - listitem:
      - link "Employing people"
    - listitem:
      - link "Environment and countryside"
    - listitem:
      - link "Housing and local services"
    - listitem:
      - link "Money and tax"
    - listitem:
      - link "Passports, travel and living abroad"
    - listitem:
      - link "Visas and immigration"
    - listitem:
      - link "Working, jobs and pensions"
  - heading "Government activity" [level=2]
  - list:
    - listitem:
      - link "Departments"
    - listitem:
      - link "News"
    - listitem:
      - link "Guidance and regulation"
    - listitem:
      - link "Research and statistics"
    - listitem:
      - link "Policy papers and consultations"
    - listitem:
      - link "Transparency"
    - listitem:
      - link "How government works"
    - listitem:
      - link "Get involved"
  - separator
  - heading "Support links" [level=2]
  - list:
    - listitem:
      - link "Help"
    - listitem:
      - link "Privacy"
    - listitem:
      - link "Cookies"
    - listitem:
      - link "Accessibility statement"
    - listitem:
      - link "Contact"
    - listitem:
      - link "Terms and conditions"
    - listitem:
      - link "Rhestr o Wasanaethau Cymraeg"
    - listitem:
      - link "Government Digital Service"
  - text: All content is available under the
  - link "Open Government Licence v3.0"
  - text: ", except where otherwise stated"
  - link "© Crown copyright"
```

# Test source

```ts
   1 | import * as playwright from 'playwright';
   2 | import {expect} from "@playwright/test";
   3 | import landingPage_content from "../content/landingPage_content";
   4 |
   5 | class LandingPage {
   6 |     private readonly title: string;
   7 |     private readonly text: string;
   8 |
   9 |     constructor() {
   10 |         this.title = `.govuk-heading-xl`
   11 |         // this.text =
   12 |     }
   13 |
   14 |     // async checkLinks(page: Page, links: string[], identifiers: string[]): Promise<void> {
   15 |     //     const header = await page.$('h2.gem-c-related-navigation__main-heading');
   16 |     //     const list = await header.evaluateHandle(h2 => h2.nextElementSibling.querySelector('ul'));
   17 |     //     const listItems = await list.$$('li.gem-c-related-navigation__link');
   18 |     //     const listActual = [];
   19 |     //     for (const item of listItems) {
   20 |     //         const text = await item.innerText();
   21 |     //         console.log(text); // Prints the text inside each <li>
   22 |     //         listActual.push(text);
   23 |     //       }
   24 |     //     //
   25 |
   26 |     //     // Check all elements of the page
   27 |     //     await Promise.all([
   28 |     //         expect(page.locator(this.title)).toHaveText(landingPage_content.pageTitle),
   29 |     //         expect(relatedContentActual).toEqual(landingPage_content.relatedContent)
   30 |     //     ]);
   31 |
   32 |
   33 |     // }
   34 |
   35 |
   36 |
   37 |     async checkPageLoads(page: Page): Promise<void> {
   38 |         // Navigate to the landing page
   39 |         await page.goto('https://www.gov.uk/calculate-your-holiday-entitlement');
   40 |
   41 |         //checking the related content links
   42 |         const header = await page.$('h2.gem-c-related-navigation__main-heading');
   43 |         const list = await header.evaluateHandle(h2 => h2.nextElementSibling.querySelector('ul'));
   44 |         const listItems = await list.$$('li.gem-c-related-navigation__link');
   45 |         const relatedContentActual = [];
   46 |         for (const item of listItems) {
   47 |             const text = await item.innerText();
   48 |             console.log(text); // Prints the text inside each <li>
   49 |             relatedContentActual.push(text);
   50 |           }
   51 |         //
   52 |
   53 |         // Check all elements of the page
   54 |         await Promise.all([
   55 |             expect(page.locator(this.title)).toHaveText(landingPage_content.pageTitle),
   56 |             expect(relatedContentActual).toEqual(landingPage_content.relatedContent)
   57 |         ]);
   58 |
   59 |         //checking the explore the topic links 
   60 |         
   61 |
   62 |         
   63 |         // Now find all <li> elements under this header
   64 |         const listItems2 = await expect(page.locator('//*[@id="content"]/div[2]/div[1]/div/div/nav')).toContainText(landingPage_content.exploreTheTopic);
   65 |
   66 |     
   67 |
   68 |         }
   69 |
   70 |     async happyPath1(page: Page): Promise<void> {
   71 |         //click on the start button and check if we have navigated to the next page 
   72 |         await page.goto('https://www.gov.uk/calculate-your-holiday-entitlement');
   73 |         await page.click('a[href="/calculate-your-holiday-entitlement/y"]');
   74 |         await expect(page.locator('h1')).toHaveText('Does the employee work irregular hours or for part of the year?');
   75 |
   76 |         //now fill in the form and click no and then continue
   77 |         await page.locator('label[for="response-1"] >> text=No').click();
   78 |         await page.locator('button:has-text("Continue")').click();
   79 |         await expect(page.locator('h1')).toHaveText('Is the holiday entitlement based on:');
   80 |
   81 |         //we are on the next page, click hours worked and continue
   82 |         await page.locator('label[for="response-1"] >> text=hours worked per week').click();
   83 |         await page.locator('button:has-text("Continue")').click();
   84 |         await expect(page.locator('h1')).toHaveText('Do you want to work out holiday:');
   85 |
   86 |         await page.locator('label[for="response-0"] >> text=for a full leave year').click();
   87 |         await page.locator('button:has-text("Continue")').click();
   88 |         await expect(page.locator('h1')).toHaveText('Number of hours worked per week?');
   89 |
   90 |         await page.locator('[id="response"]').fill('40');
   91 |         await page.locator('button:has-text("Continue")').click();
   92 |         await expect(page.locator('h1')).toHaveText('Number of days worked per week?');
   93 |
   94 |         await page.locator('[id="response"]').fill('3.5');
   95 |         await page.locator('button:has-text("Continue")').click();
>  96 |         await expect(page.locator('h1')).toHaveText('Information based on your answers');
      |                                          ^ Error: Timed out 5000ms waiting for expect(locator).toHaveText(expected)
   97 |
   98 |
   99 |     }
  100 | }
  101 |
  102 | export default LandingPage;
  103 |
```